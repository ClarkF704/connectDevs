{"ast":null,"code":"var _jsxFileName = \"/Users/clarkfarriss/Desktop/devconnector/client/src/components/profiles/Profiles.js\";\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getProfiles } from '../../actions/profile';\n\nconst Profiles = ({\n  getProfiles,\n  profile: {\n    profiles,\n    loading\n  }\n}) => {\n  useEffect(() => {\n    getProfiles();\n  }, []);\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, loading ? React.createElement(Spinner, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }) : React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"large text-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Developers\"), React.createElement(\"p\", {\n    className: \"lead\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, React.createElement(\"i\", {\n    className: \"fab fa-connectdevelop\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }), \" Browse and connect with developers\"), React.createElement(\"div\", {\n    className: \"profiles\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, profiles.length > 0 ? profiles.map() : React.createElement(\"h4\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"No Profiles Found\"))));\n};\n\nProfiles.propTypes = {\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getProfiles\n})(Profiles);","map":{"version":3,"sources":["/Users/clarkfarriss/Desktop/devconnector/client/src/components/profiles/Profiles.js"],"names":["React","Fragment","useEffect","PropTypes","connect","Spinner","getProfiles","Profiles","profile","profiles","loading","length","map","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,WAAT,QAA4B,uBAA5B;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAED,EAAAA,WAAF;AAAeE,EAAAA,OAAO,EAAE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ;AAAxB,CAAD,KAAqD;AAClER,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,WAAW;AACd,GAFQ,EAEN,EAFM,CAAT;AAGA,SAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACDI,OAAO,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAH,GAAgB,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACrB;AAAI,IAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADqB,EAErB;AAAG,IAAA,SAAS,EAAC,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAG,IAAA,SAAS,EAAC,uBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,wCAFqB,EAKrB;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GACGF,QAAQ,CAACG,GAAT,EADH,GAEG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAHR,CALqB,CADtB,CAAP;AAcH,CAlBD;;AAoBAL,QAAQ,CAACM,SAAT,GAAqB;AACjBP,EAAAA,WAAW,EAAEH,SAAS,CAACW,IAAV,CAAeC,UADX;AAEjBP,EAAAA,OAAO,EAAEL,SAAS,CAACa,MAAV,CAAiBD;AAFT,CAArB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BV,EAAAA,OAAO,EAAEU,KAAK,CAACV;AADe,CAAL,CAA7B;;AAKA,eAAeJ,OAAO,CAACa,eAAD,EAAkB;AAAEX,EAAAA;AAAF,CAAlB,CAAP,CAA0CC,QAA1C,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport { getProfiles } from '../../actions/profile';\n\n\nconst Profiles = ({ getProfiles, profile: { profiles, loading } }) => {\n    useEffect(() => {\n        getProfiles()\n    }, [])\n    return <Fragment>\n        { loading ? <Spinner/> : <Fragment>\n            <h1 className=\"large text-primary\">Developers</h1>\n            <p className=\"lead\">\n                <i className=\"fab fa-connectdevelop\"></i> Browse and connect with developers\n            </p>\n            <div className=\"profiles\">\n                {profiles.length > 0 ? (\n                    profiles.map()\n                ) : <h4>No Profiles Found</h4>}\n            </div>\n        </Fragment>}\n    </Fragment>\n    \n}\n\nProfiles.propTypes = {\n    getProfiles: PropTypes.func.isRequired,\n    profile: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = state => ({\n    profile: state.profile\n\n})\n\nexport default connect(mapStateToProps, { getProfiles })(Profiles)\n"]},"metadata":{},"sourceType":"module"}